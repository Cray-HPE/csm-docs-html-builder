name: Generate CSM Docs

on:
  #schedule:
  #  # 3AM UTC / 11PM EST / 8PM PST
  #  - cron:  '0 3 * * *'
  push:
    branches:
      - feature/github-worklow-generate-doc-service
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 30
    # TODO: Use matrix strategy when/if we are allowed to use upload/download artifact (this implies paid storage)
    services:
      nginx:
        image: nginx
        ports:
          - 80
        volumes:
          - ${{github.workspace}}/public:/usr/share/nginx/html
    steps:
      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOYKEY_WRITE_DOCS_CSM }}

      - name: Check out csm-docs-html-builder repository
        uses: actions/checkout@v2

      - name: Prepare Hugo processor run
        run: |
          set -ex
          THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          source $THIS_DIR/lib/*
          cd $THIS_DIR/..
          LAST_DIR=${OLDPWD}
          BRANCHES=(0.9 1.0 1.1 1.2)

          function clean() {
            function clean_dir() {
              [[ -d ./$1 ]] && sudo rm -rf ./$1
              mkdir -p ./$1
            }
            clean_dir content
            clean_dir public
            clean_dir docs-csm
            # [[ -f csm_docs_build.log ]] && rm csm_docs_build.log
            # touch csm_docs_build.log
            # docker network prune -f
          }
          clean

          function build () {
            echo "Cloning into docs-csm..."

            for branch in ${BRANCHES[@]}; do
              mkdir -p ./docs-csm/tmp
              cd ./docs-csm/tmp
              BACK_DIR=${OLDPWD}
              git clone git@github.com:Cray-HPE/docs-csm.git
              mv docs-csm ../$branch
              cd ../$branch
              git fetch
              git checkout "release/$branch" && git pull origin "release/$branch"
              cd $BACK_DIR
              sudo rm -rf docs-csm/tmp
            done

            # echo "Preparing markdown for Hugo..."
            # docker-compose -f $THIS_DIR/compose/hugo_prep.yml up \
            #   --force-recreate --no-color --remove-orphans | \
            # tee -a csm_docs_build.log
            # docker-compose -f $THIS_DIR/compose/hugo_prep.yml down

            # echo "Creating root _index.md"
            # gen_hugo_yaml "CSM Documentation" > content/_index.md
            # gen_index_header "CSM Documentation" >> content/_index.md
            # gen_index_content content $relative_path >> content/_index.md

            # echo "Build html pages with Hugo..."
            # docker-compose -f $THIS_DIR/compose/hugo_build.yml up \
            #   --force-recreate --no-color --remove-orphans --abort-on-container-exit | \
            # tee -a csm_docs_build.log
            # docker-compose -f $THIS_DIR/compose/hugo_build.yml down
          }
          build

      - name: Prepare pages for Hugo processor (0.9)
        uses: docker://ubuntu
        env:
          CSM_BRANCH: 0.9
        with:
          entrypoint: /github/workspace/bin/convert-docs-to-hugo.sh
          args: --source /github/workspace/docs-csm/ --destination /github/workspace/content/

      - name: Creating root indexes
        run: |
          set -ex
          THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          source $THIS_DIR/lib/*
          cd $THIS_DIR/..
          echo "Creating root _index.md"
          gen_hugo_yaml "CSM Documentation" > content/_index.md
          gen_index_header "CSM Documentation" >> content/_index.md
          gen_index_content content $relative_path >> content/_index.md

      - name: Run Hugo processor
        uses: docker://peaceiris/hugo:v0.84.4-full
        with:
          args: --config /github/workspace/config.toml --source /github/workspace/content
            --destination /github/workspace/public --themesDir /github/workspace/themes

      - name: Run link checker
        run: |
          curl -v http://localhost:${{ job.services.nginx.ports['80'] }}/index.html
